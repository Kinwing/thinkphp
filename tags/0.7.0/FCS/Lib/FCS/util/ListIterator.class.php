<?php 
/*
+---------------------------------------------------------+
| 项目: FCS -- Fast,Compatible & Simple OOP PHP Framework |
| 文件: ListIterator.class.php							  |
| 功能: Iterator基础类									  |
+---------------------------------------------------------+
| 本框架代码基于GPL协议，可免费使用，但必须保留版权信息	  |
| 版权声明: Copyright◎ 2005-2006 世纪流年 版权所有		  |
| 主 页:	http://www.liu21st.com						  |
| 作 者:	Liu21st <流年> liu21st@gmail.com			  |
+---------------------------------------------------------+
*/

class ListIterator extends Base{
	//+----------------------------------------
	//|	属性
	//+----------------------------------------
	var $_values = array();		//元素集
	var $_index;				//当前指针位置
	var $_valid = True;
	//+----------------------------------------
	//|	架构函数
	//+----------------------------------------
	function __construct(&$values)
	{
		if (is_array($values)) {
			$this->_values = &$values;
		}
		$this->_index = 0;
	}

	//+----------------------------------------
	//|	返回当前元素
	//+----------------------------------------
	function current(){
		return current($this->_values); 
	}

	//+----------------------------------------
	//|	返回当前元素的键名 没有键名返回索引
	//+----------------------------------------
	function key (){
		return key($this->_values); 
	}

	//+----------------------------------------
	//|	移动到下一个元素
	//+----------------------------------------
	function next(){
		$this->_index ++;
		$this->_valid = (FALSE !== next($this->_values)); 
		//return $this->_valid;
	}

	//+----------------------------------------
	//|	移动到上一个元素 增加方法
	//+----------------------------------------
	function prev()
	{
		$this->_index --;
		$this->_valid = (FALSE !== prev($this->_values)); 
		//return $this->_valid;
	}
	//+----------------------------------------
	//|	移动到开始位置
	//+----------------------------------------
	function rewind(){
		$this->_index = 0;
		$this->_valid = (FALSE !== reset($this->_values)); 
	}

	//+----------------------------------------
	//|	移动到最后一个元素 增加方法
	//+----------------------------------------
	function end(){
		$this->_index = count($this->_values)-1;
		$this->_valid = (FALSE !== end($this->_values)); 
	}

	//+----------------------------------------
	//|	元素是否有效
	//+----------------------------------------
	function valid(){
		return $this->_valid;
	}

	//+----------------------------------------
	//|	扩展功能，应急使用，通常不建议使用
	//| 而应该在该类的扩展类中描述具体方法
	//+----------------------------------------

/*
	//+----------------------------------------
	//|	移出当前元素
	//+----------------------------------------
	function remove()
	{
		array_splice($this->_values, $this->_index, 1);
	}

	//+----------------------------------------
	//|	设置当前元素
	//+----------------------------------------
	function set($value)
	{
		$this->_values[$this->key()] = $value;
	}

	//+----------------------------------------
	//|	添加新的元素
	//+----------------------------------------
	function add($value)
	{
		array_push($this->_values, $value);
	}
	*/
}
?>